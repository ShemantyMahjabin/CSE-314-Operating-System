diff --git a/Makefile b/Makefile
index f8c820e..5b50667 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_history\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 3 
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..4b82b72 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+extern struct spinlock historylock;
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -146,6 +147,8 @@ extern uint     ticks;
 void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
+extern struct spinlock proclock;
+
 void            usertrapret(void);
 
 // uart.c
diff --git a/kernel/param.h b/kernel/param.h
index 80ec6d3..1d9d1aa 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -12,4 +12,10 @@
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
 #define USERSTACK    1     // user stack pages
+#define SYSCALL_NUM  25
+#define DEFAULT_TICKET_COUNT 10
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..1ab14eb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -4,7 +4,10 @@
 #include "riscv.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall.h"
 #include "defs.h"
+#include "pstat.h"
+#include <stdint.h>
 
 struct cpu cpus[NCPU];
 
@@ -51,6 +54,7 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&historylock,"historylock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
@@ -145,7 +149,11 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->whichqueue=0;
+  p->original_ticket=DEFAULT_TICKET_COUNT;
+  p->remaining_ticket=DEFAULT_TICKET_COUNT;
+  p->curr_time_slice=0;
+  p->total_time_slice=0;
   return p;
 }
 
@@ -321,6 +329,8 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
+  np->original_ticket=p->original_ticket;  //child inherits the same number of tickets as its parent
+  np->remaining_ticket=p->original_ticket;
 
   return pid;
 }
@@ -433,6 +443,55 @@ wait(uint64 addr)
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
+//https://en.wikipedia.org/wiki/Xorshift
+struct xorshift32_state {
+    uint32_t a;
+};
+struct xorshift32_state rand_state = {1};  // Must be non-zero seed
+
+uint32_t xorshift32(struct xorshift32_state *state) {
+    uint32_t x = state->a;
+    x ^= x << 13;
+    x ^= x >> 17;
+    x ^= x << 5;
+    return state->a = x;
+}
+
+int rand() {
+    return (xorshift32(&rand_state) >> 1) & 0x7FFF;  // Return 15-bit positive int
+}
+
+struct proc* lottery_scheduling(){
+    int ticket_pool=0;
+    //count total tickets
+    for(struct proc *p = proc;p< &proc[NPROC]; p++){
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        ticket_pool+=p->remaining_ticket;
+      }
+      release(&p->lock);
+    }
+
+    if(ticket_pool == 0){
+      return 0;
+    }
+
+    int target = rand() % ticket_pool;
+    int counter=0;
+    for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == RUNNABLE && p->whichqueue == 0) {
+      counter += p->remaining_ticket;
+      if (counter > target) {  //target ticket falls within this process's cumulative range.
+        release(&p->lock); 
+        return p;
+      }
+    }
+    release(&p->lock);
+  }
+  return 0;
+}
+
 
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -441,6 +500,7 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
 void
 scheduler(void)
 {
@@ -448,31 +508,118 @@ scheduler(void)
   struct cpu *c = mycpu();
 
   c->proc = 0;
+  static uint last_reset = 0;
   for(;;){
     // The most recent process to run may have had interrupts
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
+    //priority boosting: After a certain time interval, all the processes are brought to the topmost queue
+    if(ticks - last_reset >= BOOST_INTERVAL) {
+      for(struct proc *pr = proc; pr < &proc[NPROC]; pr++){
+        acquire(&pr->lock);
+        pr->whichqueue=0;
+        release(&pr->lock);
+      }
+      last_reset=ticks;
+    }
 
-    int found = 0;
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+    int found_proc=0;
+     // Queue 1: Lottery Scheduling
+     struct proc *selected = lottery_scheduling();
+     if(selected != 0) {
+      acquire(&selected->lock);
+      found_proc = 1;
+
+      while (selected->state == RUNNABLE &&
+             selected->curr_time_slice < TIME_LIMIT_1) {
+        selected->state = RUNNING;
+        c->proc = selected;
+        swtch(&c->context, &selected->context);
+        c->proc = 0;
+
+        selected->curr_time_slice++;
+        selected->total_time_slice++;
+        selected->remaining_ticket--;
+      }
+      release(&selected->lock);
+
+      // If all tickets used up, refill
+      int exhausted = 1;
+      for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->whichqueue == 0 && p->remaining_ticket > 0) {
+          exhausted = 0;
+        }
+        release(&p->lock);
+      }
+
+//All the processes are reinitialized with their original ticket count once the ticket counts of all runnable processes become 0.
+
+      if(exhausted){           
+        for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+          acquire(&p->lock);
+          if (p->state == RUNNABLE && p->whichqueue == 0) {
+            p->remaining_ticket = p->original_ticket;
+          }
+          release(&p->lock);
+        }
+      }
+// if a process voluntarily consumes all time slices while it was in queue 1, it is preempted and inserted at the tail of queue 2.
+      if (selected->state == RUNNABLE &&
+          selected->curr_time_slice >= TIME_LIMIT_1) {
+        selected->whichqueue = 1;
+        selected->curr_time_slice = 0;
+      }
+
+
+     }
+
+     // Queue 2: Round-Robin if no lottery candidate found
+     if(!found_proc) {
+      for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->whichqueue == 1 && p->state == RUNNABLE) {
+          found_proc = 1;//found a process
+
+          while (p->state == RUNNABLE &&
+                 p->curr_time_slice < TIME_LIMIT_2) {
+            p->state = RUNNING;
+            c->proc = p;
+            swtch(&c->context, &p->context);
+            c->proc = 0;
+
+            p->curr_time_slice++;
+            p->total_time_slice++;
+          }
+//if a process voluntarily leaves CPU while it was in queue 2, it is inserted at the tail of queue 1.
+
+          if (p->state == RUNNABLE && p->curr_time_slice < TIME_LIMIT_2) {
+            p->whichqueue = 0;
+            p->curr_time_slice = 0;
+          }
+//reset slices
+          if (p->curr_time_slice >= TIME_LIMIT_2)
+            p->curr_time_slice = 0;
+        }
+        release(&p->lock);
+        if (found_proc) {
+          break;
+        }
+      }
+    }
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+
+        
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
+        
 
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-        found = 1;
-      }
-      release(&p->lock);
-    }
-    if(found == 0) {
+    
+    if(!found_proc) {
       // nothing to run; stop running on this core until an interrupt.
       intr_on();
       asm volatile("wfi");
@@ -633,7 +780,6 @@ killed(struct proc *p)
   release(&p->lock);
   return k;
 }
-
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
@@ -693,3 +839,6 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..f8bc94b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -27,6 +27,7 @@ struct cpu {
 };
 
 extern struct cpu cpus[NCPU];
+extern struct spinlock historylock;
 
 // per-process data for the trap handling code in trampoline.S.
 // sits in a page by itself just under the trampoline page in the
@@ -84,6 +85,7 @@ enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 // Per-process state
 struct proc {
   struct spinlock lock;
+  
 
   // p->lock must be held when using these:
   enum procstate state;        // Process state
@@ -104,4 +106,16 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //task2
+  int whichqueue;
+  int original_ticket;
+  int remaining_ticket;
+  int curr_time_slice;
+  int total_time_slice;
+
 };
+
+
+
+
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..9acdcf1
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+# ifndef _PSTAT_H_
+# define _PSTAT_H_
+# include "param.h"
+struct pstat {
+int pid [ NPROC ]; // the process ID of each process
+int inuse [ NPROC ]; // whether this slot of the process table is being used (1 or 0)
+int inQ [ NPROC ]; // which queue the process is currently in
+int tickets_original [ NPROC ]; // the number of tickets each process originally had
+int tickets_current [ NPROC ]; // the number of tickets each process currently has
+int time_slices [ NPROC ]; // the number of time slices each process has been scheduled
+};
+# endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/stat.h b/kernel/stat.h
index 19543af..0fcccfb 100644
--- a/kernel/stat.h
+++ b/kernel/stat.h
@@ -9,3 +9,9 @@ struct stat {
   short nlink; // Number of links to file
   uint64 size; // Size of file in bytes
 };
+
+struct syscall_stat {
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1138aa1 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_history(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +129,16 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
+
 };
 
+int syscall_count[SYSCALL_NUM];
+int syscall_time[SYSCALL_NUM];
+struct spinlock historylock;
+
 void
 syscall(void)
 {
@@ -136,12 +147,24 @@ syscall(void)
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    uint start_time,end_time;
+    acquire(&tickslock);
+    start_time = ticks;
+    release(&tickslock);
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    acquire(&tickslock);
+    end_time = ticks;
+    release(&tickslock);
+    acquire(&historylock);
+    syscall_count[num]++;
+    uint interval = end_time-start_time;
+    syscall_time[num]+= interval;
+    release(&historylock);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..239157c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history 22
+#define SYS_settickets 23
+#define SYS_getpinfo 24
+
+
+
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..4697b64 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,13 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall.h"
+#include "stat.h"
+#include "pstat.h"
+
+
+
+
 
 uint64
 sys_exit(void)
@@ -91,3 +98,102 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// uint64
+// sys_getstats(void)
+// {
+//   for(int i = 0; i < NSYSCALLS; i++) {
+//     acquire(&stats_locks[i]);
+//     printf("[%d] %s: count=%d, time=%d\n",i,syscall_stats[i].syscall_name,syscall_stats[i].count,syscall_stats[i].accum_time);
+//     release(&stats_locks[i]);
+//   }
+//   return 0;
+// }
+extern int syscall_count[];
+extern int syscall_time[];
+char *syscall_names[SYSCALL_NUM] = {
+  "unknown","fork", "exit", "wait", "pipe", "read", "kill", "exec",
+  "fstat", "chdir", "dup", "getpid", "sbrk", "sleep", "uptime",
+  "open", "write", "mknod", "unlink", "link", "mkdir", "close",
+  "history", "settickets", "getpinfo"
+};
+uint64
+sys_history(void) {
+  int num;
+  uint64 addr;
+  struct syscall_stat temp;
+
+  argint(0, &num);     
+  argaddr(1, &addr);    
+  if (num >= 0 && num < SYSCALL_NUM) {
+    safestrcpy(temp.syscall_name, syscall_names[num], sizeof(temp.syscall_name));
+
+    acquire(&historylock);
+    temp.count = syscall_count[num];
+    temp.accum_time = syscall_time[num];
+    release(&historylock);
+
+    if (copyout(myproc()->pagetable, addr, (char *)&temp, sizeof(temp)) < 0)
+      return -1;
+
+    return 0;
+  }
+  return -1;
+
+}
+
+
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  if(n < 0){
+    
+    myproc()->original_ticket=DEFAULT_TICKET_COUNT;
+    myproc()->remaining_ticket=DEFAULT_TICKET_COUNT;
+    
+    return -1;
+  } 
+  myproc()->original_ticket = n;
+  myproc()->remaining_ticket = n;
+  return 0;
+}
+extern struct proc proc[];
+uint64
+sys_getpinfo(void)
+{
+  struct pstat *user_ps_ptr;
+  struct pstat kernel_copy;
+  argaddr(0, (uint64 *)&user_ps_ptr);
+  if (user_ps_ptr == 0)
+    return -1;
+  int index=0;
+  acquire(&proclock);
+  for(int proc_index=0;proc_index < NPROC; proc_index++){
+    struct proc *p_entry = &proc[proc_index];
+    if(p_entry->state == UNUSED){
+      continue;
+    }
+    kernel_copy.inuse[index] = (p_entry->state == RUNNABLE || p_entry->state == RUNNING) ? 1 : 0;
+    kernel_copy.pid[index]=p_entry->pid;
+    kernel_copy.inQ[index]=p_entry->whichqueue;
+    kernel_copy.tickets_original[index]=p_entry->original_ticket;
+    kernel_copy.tickets_current[index]=p_entry->remaining_ticket;
+    kernel_copy.time_slices[index]=p_entry->total_time_slice;
+    index++;
+  }
+  release(&proclock);
+
+
+  if(index<NPROC){
+    kernel_copy.inuse[index] = -1;
+  }
+  if(copyout(myproc()->pagetable,(uint64)user_ps_ptr,(char *)&kernel_copy,sizeof(kernel_copy))<0){
+    return -1;
+  }
+
+  return 0;
+  
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index d454a7d..b7c3ab6 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -8,6 +8,7 @@
 
 struct spinlock tickslock;
 uint ticks;
+struct spinlock proclock;
 
 extern char trampoline[], uservec[], userret[];
 
diff --git a/patch.patch b/patch.patch
new file mode 100644
index 0000000..e69de29
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..e1dd74d
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,47 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define MAX_ITERATION 1000000000
+#define CHILD_NUM 4
+
+int main(int argc,char *argv[]) {
+    int tickets_to_assign = -1;
+    if(argc > 1 ) {
+        int parsed= atoi(argv[1]);
+        if(parsed >= 0) {
+            tickets_to_assign = parsed;
+        }else {
+            tickets_to_assign = -1;
+        }
+    }
+    settickets(tickets_to_assign);
+    int i;
+    for(i=0;i<CHILD_NUM;i++){
+        int pid = fork();
+        //printf("%d",pid);
+        if(pid < 0) {
+            exit(1);
+        }else if(pid == 0) {
+            int j;//child process
+            for(j=0;j<MAX_ITERATION;j++){
+                sleep(100);
+            }
+            exit(0);//child exits
+        }
+        
+    }
+
+    
+    for (int k = 0; k < MAX_ITERATION; k++) {
+        
+    }
+
+    int status;
+    for(int w=0;w<CHILD_NUM;w++){
+        wait(&status);
+
+    }
+    exit(0);
+
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..5f0f15b
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,25 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void print_syscall_stat(int syscall_num) {
+  struct syscall_stat info;
+  if (history(syscall_num, &info) == 0) {
+    printf("%d: syscall: %s, #: %d, time: %d\n",
+           syscall_num, info.syscall_name, info.count, info.accum_time);
+  } else {
+    printf("Error: Invalid syscall %d\n", syscall_num);
+  }
+}
+
+int main(int argc, char *argv[]) {
+  if (argc == 2) {
+    int syscall_num = atoi(argv[1]);
+    print_syscall_stat(syscall_num);
+  } else {
+    for (int syscall_num = 1; syscall_num <= 24; syscall_num++) {
+      print_syscall_stat(syscall_num);
+    }
+  }
+  exit(0);
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..e7a4efd
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,34 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+
+int main() {
+    sleep(100);
+    struct pstat proc_stats;
+
+    
+    
+    if (getpinfo(&proc_stats)<0) {
+        printf("getpinfo failed\n");
+        exit(1);
+    }
+    printf("PID\tInUse\tQueue\tOrigTickets\tCurTickets\tTimeSlices\n");
+
+    for (int idx = 0; idx < NPROC; idx++) {
+         if (proc_stats.inuse[idx] == -1)
+            break;
+
+
+        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n",
+               proc_stats.pid[idx],
+               proc_stats.inuse[idx],
+               proc_stats.inQ[idx],
+               proc_stats.tickets_original[idx],
+               proc_stats.tickets_current[idx],
+               proc_stats.time_slices[idx]);
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..72c6a43 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,8 @@
 struct stat;
 
+struct syscall_stat;
+struct pstat;
+
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,7 +25,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int history(int num, struct syscall_stat*);
+int settickets(int);
+int getpinfo(struct pstat *);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
@@ -41,3 +46,7 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+
+
+
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..11a6776 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("history");
+entry("settickets");
+entry("getpinfo");
